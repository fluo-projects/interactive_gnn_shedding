Heavily inspired by the work , made interactive with pygame-opengl wrapper, custom flow matching mesher, bc handler, and faster generic mesh graph net model from google deepmind


Also includes scripts to generate animations in anim directory

Baseline models created from GITHUB

modification to training to include boundary condition evolution (mainly for pressure changes in wall and inlet nodes and velocity changes in outlet nodes)     
    bad results with some simplistic bc handling (nearest pressure or velocity)
difficulty with derived mgn model in generating stable inlet conditions, model included but devolves quickly

new models trained to 1000 epochs using TIGNN data
TIGNN data remeshed using delaunay triangles to provide unstructured capabilities
tignn: 5e-4 400 milestone exponential decay
mgn: 1e-3 400 milestone exponential decay
proof of concept
added noise to node positions during training for greater robustness while moving nodes

mgn has difficulties with pressure, also remeshing has a odd velocity drop across inlet and next set of internal nodes

mgn runs ~4x faster but with larger artifacts (~25 fps on m2 macbook air for 1000 nodes)
tignn provides better results but much slower (~8 fps on m2 macbook air for 1000 nodes)

Includes custom flow matching GNN model
    Intended to keep node count constant while updating mesh to provide finer mesh refinement near body of interest 

Controls:
w,a,s,d: move screen
scroll: zoom
tab: toggle mode from points to contour fields
g: recenter screen
number keys: change field type
    1: x velocity
    2: y velocity
    3: pressure
    4: learned energy (for tignn only)
    5: learned entropy (for tignn only)

m: toggle auto edge creation
n: remesh all internal nodes
control s: save state (in pickle format)
control l: save state (in pickle format)
control z: undo
control y: redo

in point mode:
    left click: create new node/move existing node
    right click: remove node/edge
    c: change node type

escape: exit

Base models from: LINK

Credit:
Thermodynamics paper
Mesh Graph Net paper
Substantiation of extrapolated geometries

After implementation of current flow match GNN, found paper with similar implemenation
Similar GNN Flow Matching paper using different 



FUTURE LINKS:
TRAINING GITHUB


Notes:
Seems somewhat sensitive to mesh generation, could maybe add more noise into training to lower propensity of node positions on broader characteristics
Evaluate maybe mean scatter even though fundamentally, fvm method of navier stokes tracks summation of fluxes
Graph is node forming the edges of cells, from what I recall, fvm codes generally use node centers for most of their properties
    GNN maybe trained on interpolated data through cell boundaries rather than cells themselves
No boundary layer cells, unable to capture viscous effects well. No slip walls though